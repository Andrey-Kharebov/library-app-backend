// Commits
26. Refactoring_v5
  - rewrited wordsSuggestion func.

25. Refactoring_v4
  - rewrited words card func.

24. Refactoring_v3
  - rewrited createWordsPack
  
23. Refactoring_v2
  - rewrited saveWordsList

22. Refactoring
  - rewrited fetchLanguages, createLanguage, fetchLanguageObj functions

21. Added save & delete word functionality * fix mongoDB connection problem
  - added save & delete routes
  - changed mongodb://localhost:27017/library-app to mongodb://0.0.0.0:27017/library-app

20. Completed words suggestion func.

19. Fixed problem with dublicating already existing words when pack creating

18. Added finishPack route 
  - funct. to add words to wordslist for relearning

17. wordLevelUp & wordLevelDown func. + fix
  - during wordsPack creating new words arr now returns to _id fix

16. Added words model and it's func.
  - now words creating in createWordsPack function
  - and deleting when deleting parent language

15. Added creating words pack func.
  - added wordsPack model 
  - added packedWordsRemover & wordsPackArrPreparer helpers
  - added createWordsPack route
  - changed getLanguages & getLanguageById routes given this new functionality 
  - when language deletes, it's wordsPacks delete too

14. Edited saveWordsList func.
  - new languageObj with wordsList for return

13. Added deleteLanguage route 

12. Added wordsListSeparator func.

11. Added getLanguageById and saveWordsList func.

10. Added languages routes & controller
  - added get languages & createLanguage route 

9. Installed mongoDB locally
  // https://youtu.be/xwr3azx0Gf0
  - brew tap mongodb/brew
  - brew install mongodb-community
  - brew services start mongodb-community (optional)
  - installed MongoDB Compass from MongoDB site
  // https://codingstatus.com/connect-mongodb-with-node-js-using-mongoose/
  - added connection to local mongo db

8. Added check-auth middleware 
  - for preventing access to routes if not authorized

7. Added hashing & tokens functionality
  - npm i --save bcryptjs - library that helps us to create secure hashed passwords
  - npm i --save jsonwebtoken - library that allows us to generate tokens with private key
  - hashed passwords now creates during signing up
  - hashed passwords comparison during loggin in
  - creting tokens after signing up and loggin in

6. Added proper error handling
  - added HttpError.js helper
  - added error handling in users-controller
  - added error handling in main index.js

5. Added basic users functionality
  - added User model
  - added users-routes.js
  - added users-controller 
    // get users func
    // users signup & login functions

4. Added CORS settings

3. Added basic index.js configuration
  - added start script for nodemon

2. Added basic packages
  - npm i --save express mongoose body-parser 
    // express - for server creation
    // mongoose - for connecting to mongoDB & createing models
    // body-parser - processes application/x-www-form-urlencoded & application/json request's bodies and creates req.body for them
  - npm i --save-dev nodemon 
    // nodemon - allows to automatically restart our server if we changed anything in our code
  - added .gitignore

1. Initial commit